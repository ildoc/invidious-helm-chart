---
# Source: invidious/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: test-postgresql
  namespace: "components"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: invidious/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-postgresql
  namespace: "components"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
automountServiceAccountToken: false
---
# Source: invidious/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test-postgresql
  namespace: "components"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
type: Opaque
data:
  postgres-password: "NnVDNTVzODlNTQ=="
  password: "a2VtYWw="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: invidious/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test-invidious
  labels:
    helm.sh/chart: invidious-3.0.0
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2025.09.24-42d34cd"
    app.kubernetes.io/managed-by: Helm
stringData:
  INVIDIOUS_CONFIG: |
    
    
    
    
    
    
    
    channel_threads: 1
    check_tables: true
    db:
      dbname: invidious
      host: test-postgresql
      password: secure-password
      port: 5432
      user: invidious-user
    domain: ""
    feed_threads: 1
    full_refresh: false
    hmac_key: your-hmac-key-here
    https_only: false
    invidious_companion:
    - private_url: http://test-invidious-companion:8282/companion
    invidious_companion_key: your-companion-key-here
    port: 3000
---
# Source: invidious/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-postgresql-hl
  namespace: "components"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: test
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: invidious/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-postgresql
  namespace: "components"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: test
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: invidious/templates/companion-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-invidious-companion
  labels:
    helm.sh/chart: invidious-3.0.0
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2025.09.24-42d34cd"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: companion
spec:
  type: ClusterIP
  ports:
    - port: 8282
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: companion
---
# Source: invidious/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-invidious
  labels:
    helm.sh/chart: invidious-3.0.0
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2025.09.24-42d34cd"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: test
---
# Source: invidious/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-invidious
  labels:
    helm.sh/chart: invidious-3.0.0
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2025.09.24-42d34cd"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: invidious
      app.kubernetes.io/instance: test
  template:
    metadata:
      annotations:
        logging.options.max-file: "4"
        logging.options.max-size: 1G
      labels:
        helm.sh/chart: invidious-3.0.0
        app.kubernetes.io/name: invidious
        app.kubernetes.io/instance: test
        app.kubernetes.io/version: "2025.09.24-42d34cd"
        app.kubernetes.io/managed-by: Helm
    spec:
      enableServiceLinks: false
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: wait-for-postgresql
          image: actions/pg_isready
          env:
            - name: PGHOST
              value: "test-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "invidious-user"
            - name: PGPASSWORD
              value: "secure-password"
          command:
            - /bin/bash
            - -c
            - 'until pg_isready; do echo waiting for database; sleep 2; done'
        - name: init-db
          image: "quay.io/invidious/invidious:2025.09.24-42d34cd"
          envFrom:
            - secretRef:
                name: test-invidious
          env:
            
          command: ["/sbin/tini", "--"]
          args: ["/invidious/invidious", "--migrate"]
      containers:
        - name: invidious
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          image: "quay.io/invidious/invidious:2025.09.24-42d34cd"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          envFrom:
            - secretRef:
                name: test-invidious
          env:
            
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          readinessProbe:
            exec:
              command: 
                - CMD-SHELL
                - wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/trending || exit 1
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 2
          livenessProbe:
            exec:
              command: 
                - CMD-SHELL
                - wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/trending || exit 1
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 2
          startupProbe:
            exec:
              command: 
                - CMD-SHELL
                - wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/trending || exit 1
            periodSeconds: 5
            failureThreshold: 30
      restartPolicy: Always
---
# Source: invidious/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: test-postgresql
  namespace: "components"
  labels:
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: test-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: test-postgresql
      labels:
        app.kubernetes.io/instance: test
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-14.3.3
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: test-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: test
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:17
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "kemal"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: test-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: test-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "invidious"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "kemal" -d "dbname=invidious" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "kemal" -d "dbname=invidious" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/logs
              subPath: app-logs-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: invidious/templates/companion-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: test-invidious-companion
  labels:
    helm.sh/chart: invidious-3.0.0
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2025.09.24-42d34cd"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: companion
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: invidious
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: companion
  serviceName: test-invidious-companion
  template:
    metadata:
      labels:
        app.kubernetes.io/name: invidious
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: companion
    spec:
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: companion
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          image: "quay.io/invidious/invidious-companion:master-a866b71"
          imagePullPolicy: IfNotPresent
          env:
            - name: SERVER_SECRET_KEY
              value: "your-companion-key-here"
          ports:
            - name: http
              containerPort: 8282
              protocol: TCP
          volumeMounts:
            - name: cache
              mountPath: /var/tmp/youtubei.js
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
  volumeClaimTemplates:
    - metadata:
        name: cache
      spec:
        accessModes: 
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: invidious/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "test-invidious-test"
  labels:
    helm.sh/chart: invidious-3.0.0
    app.kubernetes.io/name: invidious
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2025.09.24-42d34cd"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
    - name: wget
      image: busybox:1.36
      command: ['wget']
      args: ['test-invidious:80/api/v1/stats']
