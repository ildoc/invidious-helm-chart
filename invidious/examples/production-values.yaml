# Production values for Invidious Helm Chart
#
# This file demonstrates a production-ready configuration
# with security, scalability, and monitoring best practices.
#
# Usage: helm install invidious invidious/invidious -f production-values.yaml

# Use specific image versions (never 'latest' in production)
image:
  repository: quay.io/invidious/invidious
  tag: "2025.09.24-42d34cd"
  pullPolicy: IfNotPresent

# Companion configuration
companion:
  image:
    repository: quay.io/invidious/invidious-companion
    tag: "master-a866b71"
    pullPolicy: IfNotPresent
  
  # Production resource allocation for companion
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  
  # Companion with production storage
  persistence:
    enabled: true
    size: 10Gi
    storageClass: "fast-ssd"

# Use external secrets (CRITICAL for production)
# Create secrets first: kubectl create secret generic invidious-secrets \
#   --from-literal=invidious-companion-key="$(openssl rand -base64 32)" \
#   --from-literal=hmac-key="$(openssl rand -base64 32)" \
#   --from-literal=postgresql-password="$(openssl rand -base64 32)"
existingSecret: "invidious-secrets"

# Production resource allocation
resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 1000m
    memory: 1Gi

# Enable autoscaling (note: limited to 1 replica due to database constraints)
autoscaling:
  enabled: false  # Keep disabled due to database deadlock issues
  minReplicas: 1
  maxReplicas: 1

# Production service configuration
service:
  type: ClusterIP  # Use with ingress
  port: 3000

# Enable ingress with TLS
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/client-max-body-size: "1m"
  hosts:
    - host: invidious.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: invidious-tls
      hosts:
        - invidious.example.com

# Network security
networkPolicy:
  enabled: true
  allowedIngressNamespaces:
    - ingress-nginx
  allowedIngressPods:
    - app.kubernetes.io/name: ingress-nginx

# Production PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    existingSecret: "invidious-secrets"  # Use external secret
    database: invidious
    username: invidious
  primary:
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "fast-ssd"  # Use fast storage
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  # Enable monitoring
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Production Invidious configuration
config:
  port: 3000
  domain: "invidious.example.com"
  https_only: true
  
  # Database configuration
  db:
    host: ""  # Auto-filled by chart
    port: 5432
    user: invidious
    dbname: invidious
    # password comes from existingSecret
  
  # Performance tuning for production
  channel_threads: 4
  feed_threads: 2
  check_tables: true
  
  # Security: Keys come from existingSecret
  # invidious_companion_key: from secret
  # hmac_key: from secret

# Production health checks
healthcheck:
  enabled: true
  command: ["CMD-SHELL", "wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/stats || exit 1"]
  initialDelaySeconds: 60  # Longer delay for production
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

# Security contexts (already production-ready)
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false  # Invidious needs write access
  runAsNonRoot: true
  capabilities:
    drop:
      - ALL

# Node assignment for production workloads
nodeSelector:
  node-role: "application"
  
# Tolerations for dedicated nodes
tolerations:
  - key: "workload"
    operator: "Equal"
    value: "invidious"
    effect: "NoSchedule"

# Anti-affinity to ensure pods don't run on same node
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - invidious
          topologyKey: kubernetes.io/hostname

# Production monitoring annotations
podAnnotations:
  prometheus.io/scrape: "false"  # Invidious doesn't expose Prometheus metrics
  logging.options.max-size: "100M"
  logging.options.max-file: "10"
