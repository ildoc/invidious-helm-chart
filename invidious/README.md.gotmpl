{{ template "chart.header" . }}

{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

## Overview

This Helm chart deploys [Invidious](https://invidious.io/), an alternative front-end to YouTube that respects your privacy.

### Key Features

- **Privacy-focused**: No tracking or data collection
- **Lightweight**: Minimal resource requirements
- **Docker Compose compatible**: Mirrors the official Docker Compose configuration
- **Companion support**: Includes Invidious Companion for enhanced YouTube interaction
- **Production ready**: Comprehensive security settings and best practices
- **Gateway API support**: Modern routing with advanced traffic management features

## Gateway API Support

This chart supports both traditional **Ingress** and modern **Gateway API** for traffic routing:

- **Gateway API**: Next-generation routing with advanced features (header-based routing, traffic filters, etc.)
- **Ingress**: Traditional HTTP routing (still fully supported)
- **Choose one**: Gateway API and Ingress cannot be enabled simultaneously

For Gateway API usage, see the included `examples/gateway-api-values.yaml`.

## Docker Compose Compatibility

This chart is designed to be fully compatible with the official Invidious Docker Compose template:

- Same image versions and tags
- Identical security configurations (cap_drop: ALL, read_only, no-new-privileges)
- Matching health check commands
- Equivalent logging settings
- PostgreSQL 17 support

For Docker Compose compatible deployment, use the included `values-docker-compose-compat.yaml`.

## Installation

### Prerequisites

- Kubernetes 1.19+
- Helm 3.2.0+

### Add Helm Repository

```bash
helm repo add invidious https://charts-helm.invidious.io
helm repo update
```

### Install Chart

```bash
# Basic installation
helm install invidious invidious/invidious

# Docker Compose compatible installation
helm install invidious invidious/invidious \
  -f values-docker-compose-compat.yaml

# Gateway API installation
helm install invidious invidious/invidious \
  -f examples/gateway-api-values.yaml \
  --set config.hmac_key=your-secure-key \
  --set config.invidious_companion_key=your-companion-key

# Production installation with external secrets
helm install invidious invidious/invidious \
  --set existingSecret=invidious-secrets \
  --set postgresql.auth.existingSecret=postgres-secrets
```

## Configuration

{{ template "chart.valuesSection" . }}

## Security Considerations

### Production Deployment

For production deployments, always use external secrets:

```yaml
# Create a Kubernetes secret first
apiVersion: v1
kind: Secret
metadata:
  name: invidious-secrets
type: Opaque
stringData:
  invidious-companion-key: "your-secure-companion-key"
  hmac-key: "your-secure-hmac-key"
  postgresql-password: "your-secure-db-password"
```

Then reference it in your values:

```yaml
existingSecret: "invidious-secrets"
postgresql:
  auth:
    existingSecret: "invidious-secrets"
```

### Network Security

Enable NetworkPolicy for network isolation:

```yaml
networkPolicy:
  enabled: true
  allowedIngressNamespaces:
    - ingress-nginx
  allowedIngressPods:
    - app: nginx-ingress
```

## Examples

### High Availability Setup

```yaml
replicaCount: 3
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70

postgresql:
  enabled: false  # Use external PostgreSQL cluster

config:
  db:
    host: "postgres-cluster.database.svc.cluster.local"
    port: 5432
```

### Resource-Constrained Environment

```yaml
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

companion:
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
```

## Troubleshooting

### Common Issues

1. **Database Connection Issues**
   - Check if PostgreSQL is running: `kubectl get pods -l app.kubernetes.io/name=postgresql`
   - Verify database credentials in secrets
   - Check network policies if enabled

2. **Companion Authentication Errors**
   - Ensure `invidious_companion_key` matches between Invidious and Companion
   - Verify the companion service is accessible

3. **Health Check Failures**
   - Check if the trending API endpoint is responding
   - Verify resource limits are sufficient
   - Check application logs: `kubectl logs -l app.kubernetes.io/name=invidious`

### Debug Commands

```bash
# Check pod status
kubectl get pods -l app.kubernetes.io/name=invidious

# View application logs
kubectl logs -l app.kubernetes.io/name=invidious -f

# Check service endpoints
kubectl get endpoints

# Test network connectivity
kubectl exec -it deployment/invidious -- wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/trending
```

## Upgrade

```bash
# Update repository
helm repo update

# Upgrade release
helm upgrade invidious invidious/invidious

# Rollback if needed
helm rollback invidious
```

## Uninstall

```bash
# Uninstall release
helm uninstall invidious

# Clean up persistent volumes (⚠️  This will delete all data!)
kubectl delete pvc -l app.kubernetes.io/name=postgresql
kubectl delete pvc -l app.kubernetes.io/component=companion
```

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}
